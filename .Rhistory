group_by(geoid) -> datab
View(datab)
?summarize
data %>%
mutate(fipsone = substr(SUM090, 1,5),
fipstwo = substr(SUM090, 16,21)) %>%
# select(SUM090, fipsone, fipstwo) %>% View()
unite(geoid, fipsone, fipstwo, sep = "") %>%
# select(SUM090,geoid) %>%
group_by(geoid) %>%
summarize(mort0407 = sum(HMDA),       # Home Mortgage Disclosure Act count of primary mortgages executed between 2004 and 2007. Note that this mortgage count is based on Census Tract level data that is assigned to Block Group parts based on the HU2007 variable above.
starts0910 = sum(STARTS),   # Estimated number of foreclosure starts in the target area in the past year. Each geographic area was allocated its estimated share of foreclosure starts in the state (from Mortgage Bankers Association National Delinquency Survey State Counts of Foreclosure Starts July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
REO0910 = sum(REO),
hc_rt0910 = median(HC_RATE)) -> data2
View(data2)
data %>%
mutate(fipsone = substr(SUM090, 1,5),
fipstwo = substr(SUM090, 16,21)) %>%
# select(SUM090, fipsone, fipstwo) %>% View()
unite(geoid, fipsone, fipstwo, sep = "") %>%
# select(SUM090,geoid) %>%
group_by(geoid) %>%
summarize(mort0407 = sum(HMDA),       # Home Mortgage Disclosure Act count of primary mortgages executed between 2004 and 2007. Note that this mortgage count is based on Census Tract level data that is assigned to Block Group parts based on the HU2007 variable above.
starts0910 = sum(STARTS),   # Estimated number of foreclosure starts in the target area in the past year. Each geographic area was allocated its estimated share of foreclosure starts in the state (from Mortgage Bankers Association National Delinquency Survey State Counts of Foreclosure Starts July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
REO0910 = sum(REO),         # Estimated number of completed foreclosures in the target area in the past year. Each geographic area was allocated its estimated share of completed foreclosures in the state (from RealtyTrac Count of REO completions July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
hc_rt0910 = median(HC_RATE),
hc_loans = sum(hc_rt0910*mort0407)) -> data2   # Home Mortgage Disclosure Act data showing the percent of primary mortgages executed between 2004 and 2007 that were high cost. This is the Census Tract level rate.
View(data2)
data %>%
mutate(fipsone = substr(SUM090, 1,5),
fipstwo = substr(SUM090, 16,21)) %>%
# select(SUM090, fipsone, fipstwo) %>% View()
unite(geoid, fipsone, fipstwo, sep = "") %>%
# select(SUM090,geoid) %>%
group_by(geoid) %>%
summarize(mort0407 = sum(HMDA),       # Home Mortgage Disclosure Act count of primary mortgages executed between 2004 and 2007. Note that this mortgage count is based on Census Tract level data that is assigned to Block Group parts based on the HU2007 variable above.
starts0910 = sum(STARTS),   # Estimated number of foreclosure starts in the target area in the past year. Each geographic area was allocated its estimated share of foreclosure starts in the state (from Mortgage Bankers Association National Delinquency Survey State Counts of Foreclosure Starts July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
REO0910 = sum(REO),         # Estimated number of completed foreclosures in the target area in the past year. Each geographic area was allocated its estimated share of completed foreclosures in the state (from RealtyTrac Count of REO completions July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
hc_rt0910 = median(HC_RATE),
hc_loans = sum(hc_rt0910/100*mort0407)) -> data2   # Home Mortgage Disclosure Act data showing the percent of primary mortgages executed between 2004 and 2007 that were high cost. This is the Census Tract level rate.
113/502
114/502
data %>%
mutate(fipsone = substr(SUM090, 1,5),
fipstwo = substr(SUM090, 16,21)) %>%
# select(SUM090, fipsone, fipstwo) %>% View()
unite(geoid, fipsone, fipstwo, sep = "") %>%
# select(SUM090,geoid) %>%
group_by(geoid) %>%
summarize(mort0407 = sum(HMDA),       # Home Mortgage Disclosure Act count of primary mortgages executed between 2004 and 2007. Note that this mortgage count is based on Census Tract level data that is assigned to Block Group parts based on the HU2007 variable above.
starts0910 = sum(STARTS),   # Estimated number of foreclosure starts in the target area in the past year. Each geographic area was allocated its estimated share of foreclosure starts in the state (from Mortgage Bankers Association National Delinquency Survey State Counts of Foreclosure Starts July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
REO0910 = sum(REO),         # Estimated number of completed foreclosures in the target area in the past year. Each geographic area was allocated its estimated share of completed foreclosures in the state (from RealtyTrac Count of REO completions July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
hc_rt0910 = median(HC_RATE),
hc_loans = round(sum(hc_rt0910/100*mort0407),0)) -> data2   # Home Mortgage Disclosure Act data showing the percent of primary mortgages executed between 2004 and 2007 that were high cost. This is the Census Tract level rate.
50/233
# write_csv(data, "fiftystates_alldata_NSP3.csv")
write_csv(data2, "fiftystates_NSP3.csv")
# read_csv("fiftystates_alldata_NSP3.csv")
fiftystates_NSP3 <- read_csv("fiftystates_NSP3.csv")
crosswalk <- read_csv("crosswalk_2000_2010.csv")
walkdata2 <- left_join(crosswalk, fiftystates_NSP3, by = c("trtid00" = "geoid"))
fiftystates_NSP3 %>%
summarize(
total = sum(Sum_hmda, na.rm = TRUE))
fiftystates_NSP3 %>%
summarize(
total = sum(mort0407, na.rm = TRUE))
walkdata2 %>%
mutate(hmda = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
View(d2a)
walkdata2 %>%
group_by(trtid00)
walkdata2 %>%
group_by(trtid00) %>%
mutate(hmda = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
walkdata2 %>%
group_by(trtid00) %>%
mutate(mort = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
d2a %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
walkdata2 %>%
mutate(mort = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
d2a %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
hmda = Sum_hmda * weight) -> d3
hmda = mort0407 * weight) -> d3
hmda = mort0407 * weight) -> d3
walkdata2 %>%
group_by(trtid10) %>%
mutate(hmda = mort0407 * weight) -> d3
View(d3)
walkdata2 %>%
group_by(trtid10) %>%
mutate(mort = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
View(d2a)
walkdata2 %>%
group_by(trtid10) %>%
mutate(mort = sum(mort0407*weight),
starts = sum(starts0910*weight),
reo = sum(REO0910*weight),
hc = sum(hc_loans*weight)) ->d3
View(d3)
walkdata2 %>%
group_by(trtid10) %>%
summarize(mort = sum(mort0407*weight),
starts = sum(starts0910*weight),
reo = sum(REO0910*weight),
hc = sum(hc_loans*weight)) ->d3
walkdata2 %>%
group_by(trtid10) %>%
summarize(mort = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
d3 %>%
summarize(
hmda_total = sum(mort),
starts_total = sum(starts),
reo_total = sum(reo),
hc_total = sum(hc))
d3 %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
d2a %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
walkdata2 %>%
mutate(mort = mort0407*weight,
starts = starts0910*weight,
reo = REO0910*weight,
hc = hc_loans*weight) ->d2a
d2a %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
d3 %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
write_csv(walkdata2, "walkdata2c.csv", na = "0")
d2a %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
d3 %>%
summarize(
hmda_total = sum(mort, na.rm = TRUE),
starts_total = sum(starts, na.rm = TRUE),
reo_total = sum(reo, na.rm = TRUE),
hc_total = sum(hc, na.rm = TRUE))
walkdata2 %>%
group_by(trtid10) %>%
summarize(mort = sum(mort0407*weight),
starts = sum(starts0910*weight),
reo = sum(REO0910*weight),
hc = sum(hc_loans*weight),
pstarts = starts/mort,
preo = reo/mort,
p_hc = hc/mort) ->d3
View(d3)
walkdata2 %>%
group_by(trtid10) %>%
summarize(mort = sum(mort0407*weight),
starts = sum(starts0910*weight),
reo = sum(REO0910*weight),
hc = sum(hc_loans*weight),
pstarts = starts/mort*100,
preo = reo/mort*100,
p_hc = hc/mort*100) ->d3
View(walkdata2)
View(walkdata2)
View(d3)
View(d3)
# 20013-17 census tracts for all 50 states w/ geometry
totalpop_sf <- reduce(
map(us, function(x) {
get_acs(geography = "tract", variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
us <- unique(fips_codes$state)[1:51]
library(tidycensus)
library(sf)
library(tigris)
options(tigris_use_cache = TRUE)
options(tigris_class = 'sf')
th_api_acs <- '45544f0d114cfaa037a5566745d18bb8d4778cfa'
us <- unique(fips_codes$state)[1:51]
# 20013-17 census tracts for all 50 states w/ geometry
totalpop_sf <- reduce(
map(us, function(x) {
get_acs(geography = "tract", variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
left_join(totalpop_sf,d3)
View(totalpop_sf)
work <- left_join(totalpop_sf,d3, by = c("GEOID" = "trtid00"))
work <- left_join(totalpop_sf,d3, by = c("GEOID" = "trtid10"))
anti_join(totalpop_sf, d3, by = c("GEOID" = "geoid")) -> a1
anti_join(totalpop_sf, d3, by = c("GEOID" = "trtid10")) -> a1
View(a1)
View(crosswalk)
View(a1)
totalpop10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", year = 2010, variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
get_decennial()
?get_decennial()
totalpop10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
totalpop10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", survey = "sf3", variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
totalpop10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", survey = "sf1", variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
?get_decennial()
totalpop13_sf <- reduce(
map(us, function(x) {
get_acs(geography = "tract", year = 2013, variables = "B01003_001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
work13 <- left_join(totalpop13_sf,d3, by = c("GEOID" = "trtid10"))
anti_join(totalpop13_sf, d3, by = c("GEOID" = "trtid10")) -> a13
work_walk <- left_join(totalpop13_sf,crosswalk, by = c("GEOID" = "trtid10"))
anti_join(totalpop13_sf, anti_join, by = c("GEOID" = "trtid10")) -> a13
anti_join(totalpop13_sf, crosswalk, by = c("GEOID" = "trtid10")) -> a13
anti_join(totalpop13_sf, crosswalk, by = c("GEOID" = "trtid10")) -> a_walk
anti_join(totalpop13_sf, d3, by = c("GEOID" = "trtid10")) -> a13
View(a_walk)
73056-72693
View(crosswalk)
load_variables(2010, "decennial")
?load_variables()
load_variables(2010, "sf1") %>% View(0)
load_variables(2010, "sf1") %>% View()
totalhu10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", year = 2010, survey = 'sf1', variables = "H001001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
get_decennial()
?get_decennial()
totalhu10_sf <- reduce(
map(us, function(x) {
get_decennial(geography = "tract", year = 2010, sumfile = 'sf1', variables = "H001001",
state = x, key = th_api_acs, geometry = TRUE)
}),
rbind
)
work10_walk <- left_join(totalhu10_sf,crosswalk, by = c("GEOID" = "trtid10"))
anti_join(totalhu10_sf, crosswalk, by = c("GEOID" = "trtid10")) -> a_walk
anti_join(totalhu10_sf, crosswalk, by = c("GEOID" = "trtid10")) -> a10_walk
View(a10_walk)
load_variables(2010, "sf3") %>% View()
load_variables(2010, "sf3") %>% View()
load_variables(2010) %>% View()
?load_variables
load_variables(2010, "sf3") %>% View()
View(a1)
anti_join(a10_walk, a1) -> missingwalks
a1
totalpop13_sf <- reduce(
map(us, function(x) {
get_acs(geography = "tract", year = 2013, variables = "B01003_001",
state = x, key = th_api_acs, geometry = FALSE)
}),
rbind
)
View(walkdata2)
View(crosswalk)
View(totalpop13_sf)
anti_join(totalpop13_sf, crosswalk, by = c("GEOID" = "trtid10")) -> a_walk
anti_join(totalpop_sf, d3, by = c("GEOID" = "trtid10")) -> a1
anti_join(totalhu10_sf, totalpop13_sf) -> boundary1017
totalpop13 <- totalpop13_sf %>%
as_tibble()
anti_join(totalhu10_sf, totalpop13) -> boundary1017
anti_join(totalhu10_sf, totalpop13, by = "GEOID") -> boundary1017
View(boundary1017)
anti_join(totalpop13, totalhu10_sf, by = "GEOID") -> boundary1017
anti_join(totalpop13, totalhu10_sf, by = "GEOID") -> boundary1017
View(boundary1017)
###*************
# read in msas, 2018 1 year ACS
metropop <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
variables = "B01003_001", year = 2018, survey = "acs1", cb = TRUE,
key = th_api_acs)
top50metros <- metropop %>%
top_n(51, estimate) %>% # San Juan is #35. delete in next line.
filter(!(GEOID %in% c("41980")))
top50metros
###*************
# read in msas, 2018 1 year ACS
metropop <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
variables = "B01003_001", year = 2018, survey = "acs1", cb = TRUE,
key = th_api_acs, geography = TRUE)
###*************
# read in msas, 2018 1 year ACS
metropop <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
variables = "B01003_001", year = 2018, survey = "acs1", cb = TRUE,
key = th_api_acs, geometry = TRUE)
metros <- core_based_statistical_areas(cb = TRUE) %>%
filter(GEOID %in% top50metros) %>%
select(metro_name = NAME)
View(top50metros)
metros <- core_based_statistical_areas(cb = TRUE) %>%
filter(GEOID %in% top50metros$GEOID) %>%
select(metro_name = NAME)
top50metros_tracts <- st_join(work, metros, join = st_within,
left = FALSE)
library(tmap)
View(top50metros_tracts)
tm_shape(top50metros_tracts) +
tm_polygons("hc")
tmap_mode("view")
tm_shape(top50metros_tracts) +
tm_polygons("hc", lwd=0 )
tm_shape(top50metros_tracts) +
tm_polygons("mort", lwd=0, style = 'jenks', alpha = .5 )
top50metro_tracts %>%
count(hc)
top50metros_tracts %>%
summarize(
count(hc)
)
?count
top50metros_tracts %>%
tally(hc)
top50metros_tracts %>%
count(hc)
summary(top50metros_tracts$hc)
summary(fiftystates_NSP3$hc_loans)
data_path <- "NSP3"
files <- dir(data_path, pattern = "*.xls")
data <- files %>%
# read in all the files, appending the path before the filename using read_xls()
map(~ read_xls(file.path(data_path, .))) %>%
reduce(rbind) # reduce with rbind into one dataframe
summary(data$hc_rt0910)
View(data)
summary(data$HC_RATE)
42523/388950
data %>%
mutate(fipsone = substr(SUM090, 1,5),
fipstwo = substr(SUM090, 16,21)) %>%
# select(SUM090, fipsone, fipstwo) %>% View()
unite(geoid, fipsone, fipstwo, sep = "") %>%
# select(SUM090,geoid) %>%
group_by(geoid) %>%
summarize(mort0407 = sum(HMDA),       # Home Mortgage Disclosure Act count of primary mortgages executed between 2004 and 2007. Note that this mortgage count is based on Census Tract level data that is assigned to Block Group parts based on the HU2007 variable above.
starts0910 = sum(STARTS),   # Estimated number of foreclosure starts in the target area in the past year. Each geographic area was allocated its estimated share of foreclosure starts in the state (from Mortgage Bankers Association National Delinquency Survey State Counts of Foreclosure Starts July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
REO0910 = sum(REO),         # Estimated number of completed foreclosures in the target area in the past year. Each geographic area was allocated its estimated share of completed foreclosures in the state (from RealtyTrac Count of REO completions July 2009 to June 2010) based on its estimated share of serious delinquent borrowers (calculated for each geographic area as HMDA * SDQ_RATE).
hc_rt0910 = median(HC_RATE),
hc_loans = round(sum(hc_rt0910/100*mort0407),0)) -> data2   # Home Mortgage Disclosure Act data showing the percent of primary mortgages executed between 2004 and 2007 that were high cost. This is the Census Tract level rate.
summary(data2$hc_loans)
summary(data2$hc_rt0910)
22669/65443
summary(top50metros_tracts$hc)
13556/38735
top50metros_tracts %>%
group_by(metro_name) %>%
summarize(
count(n = hc)
)
top50metros_tracts %>%
group_by(metro_name) %>%
summarize(
count(hc)
)
top50metros_tracts %>%
group_by(metro_name) %>%
summary(hc)
top50metros_tracts %>%
group_by(metro_name) %>%
summary("hc")
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(
count(hc)
)
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(
count(hc, na.rm = TRUE)
)
str(top50metros_tracts)
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(
total = sum(hc, na.rm = TRUE))
total = sum(hc, na.rm = TRUE),
subprime_rate = sum(hc/mort*100)) %>%
arrange(desc(total))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(
total = sum(hc, na.rm = TRUE),
subprime_rate = sum(hc/mort*100))
total = sum(hc, na.rm = TRUE),
subprime_rate = sum(hc/mort*100, na.rm = TRUE)) %>%
arrange(desc(total))
total = sum(hc, na.rm = TRUE)) %>%
arrange(desc(total))
total = sum(hc, na.rm = TRUE)) %>%
arrange(desc(total))
top50metros_tracts %>%
group_by(metro_name) %>%
mutate(total = sum(hc, na.rm = TRUE)) %>%
arrange(desc(total))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(total = sum(hc, na.rm = TRUE)) %>%
arrange(desc(total))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(hc_metro = sum(hc, na.rm = TRUE),
mort_metro = sum(mort, na.rm = TRUE),
hc_metro_rate = hc_metro/mort_metro*100) %>%
arrange(desc(total))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(hc_metro = sum(hc, na.rm = TRUE),
mort_metro = sum(mort, na.rm = TRUE),
hc_metro_rate = hc_metro/mort_metro*100) %>%
arrange(desc(hc_metro))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(hc_metro = sum(hc, na.rm = TRUE),
mort_metro = sum(mort, na.rm = TRUE),
hc_metro_rate = hc_metro/mort_metro*100) %>%
arrange(desc(hc_metro_rate))
top50metros_tracts %>%
group_by(metro_name) %>%
summarise(hc_metro = sum(hc, na.rm = TRUE),
mort_metro = sum(mort, na.rm = TRUE),
hc_metro_rate = hc_metro/mort_metro*100) %>%
arrange(desc(hc_metro_rate)) -> metro_analyze
tm_shape(metro_analyze) %>%
tm_bubbles("hc_metro_rate")
metro_analyze
tm_shape(metro_analyze) +
tm_bubbles("hc_metro_rate")
?tm_bubbles
tm_shape(metro_analyze) +
tm_bubbles("hc_metro_rate", scale = 3)
tm_shape(metro_analyze) +
tm_bubbles("hc_metro_rate", scale = 2)
View(metro_analyze)
tm_shape(metro_analyze) +
tm_bubbles("hc_metro", scale = 2)
tm_shape(metro_analyze) +
tm_bubbles("hc_metro", scale = 3)
